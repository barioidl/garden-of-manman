[gd_scene load_steps=26 format=3 uid="uid://dxoq1or5n41wx"]

[ext_resource type="Script" path="res://scenes/3d scenes/facility/door controller.gd" id="1_585e0"]
[ext_resource type="Script" path="res://scripts/visual/door slide.gd" id="1_xvq1m"]
[ext_resource type="Script" path="res://scripts/audio/audio_list.gd" id="2_ticx8"]
[ext_resource type="Script" path="res://scripts/objects/lock.gd" id="2_u7rai"]
[ext_resource type="AudioStream" uid="uid://le84adcvsr4y" path="res://assets/audio/kenney_rpg-audio/Audio/doorOpen_1.ogg" id="3_3hgk3"]
[ext_resource type="AudioStream" uid="uid://c7h4n1akhjho7" path="res://assets/audio/kenney_rpg-audio/Audio/doorOpen_2.ogg" id="4_g30xk"]
[ext_resource type="AudioStream" uid="uid://n3fgt15re2q1" path="res://assets/audio/kenney_rpg-audio/Audio/doorClose_1.ogg" id="5_dddhu"]
[ext_resource type="AudioStream" uid="uid://ctix3ut3bravx" path="res://assets/audio/kenney_rpg-audio/Audio/doorClose_2.ogg" id="6_tcm6h"]
[ext_resource type="AudioStream" uid="uid://bt57slhjr1v0p" path="res://assets/audio/kenney_rpg-audio/Audio/doorClose_4.ogg" id="7_7nhrt"]
[ext_resource type="Texture2D" uid="uid://idwh770af3w5" path="res://assets/flakdeau19, Pixel Art Texture Pack/Pixel Art Texture Pack/Metal/s2 Metal Grid 2.png" id="9_pahci"]
[ext_resource type="Texture2D" uid="uid://bxy8vw8lnvb3t" path="res://assets/flakdeau19, Pixel Art Texture Pack/Pixel Art Texture Pack/Metal/s2 Metal Grid 2 Holes.png" id="10_20wh0"]
[ext_resource type="Texture2D" uid="uid://d1he6jdhh6c34" path="res://assets/little-martian, retro-texture-pack-v9/png/DOOR_2A.png" id="12_we7dj"]
[ext_resource type="Texture2D" uid="uid://bv0sk654eoq1k" path="res://assets/little-martian, retro-texture-pack-v9/png/PIPES_1B.png" id="13_q1ya4"]

[sub_resource type="Resource" id="Resource_vw06u"]
script = ExtResource("2_ticx8")
pitch_range = Vector2(0.1, 0.2)
volume_range = Vector2(-1, 1)
streams = Array[AudioStream]([ExtResource("3_3hgk3"), ExtResource("4_g30xk")])

[sub_resource type="Resource" id="Resource_xfxpr"]
script = ExtResource("2_ticx8")
pitch_range = Vector2(0.1, 0.2)
volume_range = Vector2(-1, 1)
streams = Array[AudioStream]([ExtResource("5_dddhu"), ExtResource("6_tcm6h"), ExtResource("7_7nhrt")])

[sub_resource type="BoxShape3D" id="BoxShape3D_nyf5f"]
size = Vector3(0.2, 6, 4)

[sub_resource type="Shader" id="Shader_q72fo"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_toon,specular_toon;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_gray,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_nearest,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform float rim : hint_range(0,1);
uniform float rim_tint : hint_range(0,1);
uniform sampler2D texture_rim : hint_default_white,filter_nearest,repeat_enable;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(0.333333,0.333333,0.333333,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = triplanar_texture(texture_emission,uv1_power_normal,uv1_triplanar_pos).rgb;
	EMISSION = (emission.rgb*emission_tex)*emission_energy;
	vec2 rim_tex = triplanar_texture(texture_rim,uv1_power_normal,uv1_triplanar_pos).xy;
	RIM = rim*rim_tex.x;	RIM_TINT = rim_tint*rim_tex.y;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_avc2d"]
render_priority = 0
shader = SubResource("Shader_q72fo")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/roughness = 0.1
shader_parameter/metallic_texture_channel = Vector4(1, 1, 1, 1)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.1
shader_parameter/emission = null
shader_parameter/emission_energy = null
shader_parameter/rim = 0.5
shader_parameter/rim_tint = 0.5
shader_parameter/uv1_blend_sharpness = 20.0
shader_parameter/uv1_scale = Vector3(0.25, 0.25, 0.25)
shader_parameter/uv1_offset = Vector3(0.147, 0.409, 0.5)
shader_parameter/texture_albedo = ExtResource("9_pahci")
shader_parameter/texture_metallic = ExtResource("9_pahci")
shader_parameter/texture_roughness = ExtResource("10_20wh0")
shader_parameter/texture_emission = ExtResource("10_20wh0")
shader_parameter/texture_rim = ExtResource("10_20wh0")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_iefee"]
albedo_color = Color(1, 0.454902, 1, 1)

[sub_resource type="BoxMesh" id="BoxMesh_vr4sq"]
material = SubResource("StandardMaterial3D_iefee")
size = Vector3(0.2, 6, 4)

[sub_resource type="BoxShape3D" id="BoxShape3D_f8f0v"]
size = Vector3(0.25, 0.5, 0.325)

[sub_resource type="Shader" id="Shader_mf78y"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_toon,specular_toon;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_gray,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_nearest,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform float rim : hint_range(0,1);
uniform float rim_tint : hint_range(0,1);
uniform sampler2D texture_rim : hint_default_white,filter_nearest,repeat_enable;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(0.333333,0.333333,0.333333,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = triplanar_texture(texture_emission,uv1_power_normal,uv1_triplanar_pos).rgb;
	EMISSION = (emission.rgb*emission_tex)*emission_energy;
	vec2 rim_tex = triplanar_texture(texture_rim,uv1_power_normal,uv1_triplanar_pos).xy;
	RIM = rim*rim_tex.x;	RIM_TINT = rim_tint*rim_tex.y;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_hjf24"]
render_priority = 0
shader = SubResource("Shader_mf78y")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/roughness = 0.1
shader_parameter/metallic_texture_channel = Vector4(1, 1, 1, 1)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.1
shader_parameter/emission = Color(1, 1, 1, 1)
shader_parameter/emission_energy = 1.0
shader_parameter/rim = 0.5
shader_parameter/rim_tint = 0.5
shader_parameter/uv1_blend_sharpness = 20.0
shader_parameter/uv1_scale = Vector3(0.35, 0.35, 0.35)
shader_parameter/uv1_offset = Vector3(1.174, 0.524, -0.4)
shader_parameter/texture_albedo = ExtResource("12_we7dj")
shader_parameter/texture_metallic = ExtResource("12_we7dj")
shader_parameter/texture_roughness = ExtResource("12_we7dj")
shader_parameter/texture_emission = ExtResource("12_we7dj")
shader_parameter/texture_rim = ExtResource("12_we7dj")

[sub_resource type="BoxMesh" id="BoxMesh_wpfkq"]
size = Vector3(0.25, 0.5, 0.325)

[sub_resource type="BoxMesh" id="BoxMesh_j6k4r"]
size = Vector3(0.25, 0.5, 0.325)

[node name="door" type="StaticBody3D" node_paths=PackedStringArray("lock")]
script = ExtResource("1_585e0")
password = 6
lock = NodePath("lock")
door_meshes = [NodePath("lock/CollisionShape3D/MeshInstance3D"), NodePath("lock/CollisionShape3D2/MeshInstance3D")]
door_open_sfx = SubResource("Resource_vw06u")
door_close_sfx = SubResource("Resource_xfxpr")

[node name="top" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3, 0)
shape = SubResource("BoxShape3D_nyf5f")
script = ExtResource("1_xvq1m")
duration = 5.0
open_position = 6.0
clode_position = 3.0
direction = 1

[node name="MeshInstance3D" type="MeshInstance3D" parent="top"]
material_override = SubResource("ShaderMaterial_avc2d")
mesh = SubResource("BoxMesh_vr4sq")
skeleton = NodePath("../..")

[node name="lock" type="StaticBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.5, -1.5)
script = ExtResource("2_u7rai")
password = 6
easy_close = true
cooldown = 5.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="lock"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.2, 0, -0.5)
shape = SubResource("BoxShape3D_f8f0v")

[node name="MeshInstance3D" type="MeshInstance3D" parent="lock/CollisionShape3D"]
material_override = SubResource("ShaderMaterial_hjf24")
mesh = SubResource("BoxMesh_wpfkq")

[node name="CollisionShape3D2" type="CollisionShape3D" parent="lock"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -0.5, 0, 0)
shape = SubResource("BoxShape3D_f8f0v")

[node name="MeshInstance3D" type="MeshInstance3D" parent="lock/CollisionShape3D2"]
material_override = SubResource("ShaderMaterial_hjf24")
mesh = SubResource("BoxMesh_j6k4r")

[node name="Decal" type="Decal" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 3, 0)
layers = 512
size = Vector3(4, 6, 0.2)
texture_albedo = ExtResource("13_q1ya4")
texture_normal = ExtResource("13_q1ya4")
texture_orm = ExtResource("13_q1ya4")
upper_fade = 1.68179e-05
lower_fade = 1e-05
cull_mask = 512

[connection signal="lock_updated" from="lock" to="." method="updated"]
[connection signal="lock_updated" from="lock" to="top" method="slide"]
