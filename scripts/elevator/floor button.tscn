[gd_scene load_steps=17 format=3 uid="uid://bca8j52nv1qj7"]

[ext_resource type="Script" path="res://scripts/elevator/floor button.gd" id="1_m45x3"]
[ext_resource type="Script" path="res://scripts/button press animation.gd" id="2_anxcp"]
[ext_resource type="Texture2D" uid="uid://44sp4isvi85q" path="res://assets/little-martian, retro-texture-pack-v9/png/TILE_3C.png" id="2_f720p"]
[ext_resource type="Script" path="res://scripts/audio/audio_list.gd" id="3_anw81"]
[ext_resource type="AudioStream" uid="uid://bvcxmtudo0d1x" path="res://assets/audio/zapsplat/industrial_elevator_button_call_press.mp3" id="5_xce82"]
[ext_resource type="Script" path="res://scripts/elevator/button color setup.gd" id="6_qmjww"]
[ext_resource type="Texture2D" uid="uid://bjwbbyf0cv8hj" path="res://assets/flakdeau19,256x256 Pixel Textures/256x256/256_Tiles Circle 09.png" id="7_pjwse"]

[sub_resource type="BoxShape3D" id="BoxShape3D_85rae"]
size = Vector3(0.1, 0.5, 0.5)

[sub_resource type="Shader" id="Shader_mf78y"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_toon,specular_toon;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_gray,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_nearest,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform float rim : hint_range(0,1);
uniform float rim_tint : hint_range(0,1);
uniform sampler2D texture_rim : hint_default_white,filter_nearest,repeat_enable;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(0.333333,0.333333,0.333333,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = triplanar_texture(texture_emission,uv1_power_normal,uv1_triplanar_pos).rgb;
	EMISSION = (emission.rgb*emission_tex)*emission_energy;
	vec2 rim_tex = triplanar_texture(texture_rim,uv1_power_normal,uv1_triplanar_pos).xy;
	RIM = rim*rim_tex.x;	RIM_TINT = rim_tint*rim_tex.y;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_j8gc4"]
render_priority = 0
shader = SubResource("Shader_mf78y")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/roughness = 0.01
shader_parameter/metallic_texture_channel = Vector4(1, 1, 1, 1)
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/emission = null
shader_parameter/emission_energy = null
shader_parameter/rim = 0.5
shader_parameter/rim_tint = 0.5
shader_parameter/uv1_blend_sharpness = 20.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(0.475, 0.382, 0.375)
shader_parameter/texture_albedo = ExtResource("2_f720p")
shader_parameter/texture_metallic = ExtResource("2_f720p")
shader_parameter/texture_roughness = ExtResource("2_f720p")
shader_parameter/texture_emission = ExtResource("2_f720p")
shader_parameter/texture_rim = ExtResource("2_f720p")

[sub_resource type="BoxMesh" id="BoxMesh_42uhm"]
size = Vector3(0.1, 0.5, 0.5)

[sub_resource type="CylinderShape3D" id="CylinderShape3D_5fodq"]
height = 0.2
radius = 0.2

[sub_resource type="Resource" id="Resource_jvd06"]
script = ExtResource("3_anw81")
pitch_range = Vector2(0.75, 1.25)
volume_range = Vector2(-3, 1)
streams = Array[AudioStream]([ExtResource("5_xce82")])

[sub_resource type="Shader" id="Shader_ak2p2"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_toon,specular_toon;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_gray,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_nearest,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform float rim : hint_range(0,1);
uniform float rim_tint : hint_range(0,1);
uniform sampler2D texture_rim : hint_default_white,filter_nearest,repeat_enable;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(0.333333,0.333333,0.333333,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = triplanar_texture(texture_emission,uv1_power_normal,uv1_triplanar_pos).rgb;
	EMISSION = (emission.rgb*emission_tex)*emission_energy;
	vec2 rim_tex = triplanar_texture(texture_rim,uv1_power_normal,uv1_triplanar_pos).xy;
	RIM = rim*rim_tex.x;	RIM_TINT = rim_tint*rim_tex.y;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ghajm"]
render_priority = 0
shader = SubResource("Shader_ak2p2")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/roughness = 0.01
shader_parameter/metallic_texture_channel = Vector4(1, 1, 1, 1)
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/emission = null
shader_parameter/emission_energy = null
shader_parameter/rim = 0.5
shader_parameter/rim_tint = 0.5
shader_parameter/uv1_blend_sharpness = 20.0
shader_parameter/uv1_scale = Vector3(0.425, 0.425, 0.425)
shader_parameter/uv1_offset = Vector3(0.5, 0.786, 0.499)
shader_parameter/texture_albedo = ExtResource("7_pjwse")
shader_parameter/texture_metallic = ExtResource("7_pjwse")
shader_parameter/texture_roughness = ExtResource("7_pjwse")
shader_parameter/texture_emission = ExtResource("7_pjwse")
shader_parameter/texture_rim = ExtResource("7_pjwse")

[sub_resource type="CylinderMesh" id="CylinderMesh_ycwv7"]
top_radius = 0.2
bottom_radius = 0.2
height = 0.2
radial_segments = 12
rings = 1
cap_top = false

[node name="button" type="StaticBody3D"]
script = ExtResource("1_m45x3")

[node name="CollisionShape3D2" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.05, 0, 0)
shape = SubResource("BoxShape3D_85rae")

[node name="MeshInstance3D" type="MeshInstance3D" parent="CollisionShape3D2"]
material_override = SubResource("ShaderMaterial_j8gc4")
mesh = SubResource("BoxMesh_42uhm")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, 0.2, 0, 0)
shape = SubResource("CylinderShape3D_5fodq")
script = ExtResource("2_anxcp")
transition = 4
sfx_list = SubResource("Resource_jvd06")

[node name="button" type="MeshInstance3D" parent="CollisionShape3D"]
material_override = SubResource("ShaderMaterial_ghajm")
mesh = SubResource("CylinderMesh_ycwv7")
skeleton = NodePath("../..")
script = ExtResource("6_qmjww")
