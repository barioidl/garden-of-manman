[gd_scene load_steps=9 format=3 uid="uid://cmi132ifn1jtu"]

[ext_resource type="Script" path="res://scripts/visual/door slide.gd" id="1_jpeal"]
[ext_resource type="Resource" uid="uid://uvy2cwjcfxec" path="res://data/audio/elevator door slide.tres" id="1_mp7cb"]
[ext_resource type="Texture2D" uid="uid://d1he6jdhh6c34" path="res://assets/little-martian, retro-texture-pack-v9/png/DOOR_2A.png" id="2_bri5y"]

[sub_resource type="GDScript" id="GDScript_a7dpo"]
script/source = "extends StaticBody3D

@export var slide_sfx :AudioList

func _ready() -> void:
	add_to_group(NL.elevator_doors)
	set_meta(NL.is_open,is_open)

@onready var panel = $\"door panel\"
func slide(open:bool):
	panel.slide(open)
	_open = open
	
	var pos = panel.global_position
	AudioPool.create_sound_3d(pos, slide_sfx)

var _open := false
func is_open()->bool:
	return _open
"

[sub_resource type="BoxShape3D" id="BoxShape3D_csrv8"]
size = Vector3(0.1, 3, 3)

[sub_resource type="Shader" id="Shader_guw1u"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_toon,specular_toon;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_gray,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_nearest,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform float rim : hint_range(0,1);
uniform float rim_tint : hint_range(0,1);
uniform sampler2D texture_rim : hint_default_white,filter_nearest,repeat_enable;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(0.333333,0.333333,0.333333,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = triplanar_texture(texture_emission,uv1_power_normal,uv1_triplanar_pos).rgb;
	EMISSION = (emission.rgb*emission_tex)*emission_energy;
	vec2 rim_tex = triplanar_texture(texture_rim,uv1_power_normal,uv1_triplanar_pos).xy;
	RIM = rim*rim_tex.x;	RIM_TINT = rim_tint*rim_tex.y;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3bnqc"]
render_priority = 0
shader = SubResource("Shader_guw1u")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/roughness = 0.5
shader_parameter/metallic_texture_channel = Vector4(1, 1, 1, 1)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.2
shader_parameter/emission = null
shader_parameter/emission_energy = null
shader_parameter/rim = 0.5
shader_parameter/rim_tint = 0.5
shader_parameter/uv1_blend_sharpness = 20.0
shader_parameter/uv1_scale = Vector3(0.333, 0.333, 0.333)
shader_parameter/uv1_offset = Vector3(0.65, 0.5, -0.5)
shader_parameter/texture_albedo = ExtResource("2_bri5y")
shader_parameter/texture_metallic = ExtResource("2_bri5y")
shader_parameter/texture_roughness = ExtResource("2_bri5y")
shader_parameter/texture_emission = ExtResource("2_bri5y")
shader_parameter/texture_rim = ExtResource("2_bri5y")

[sub_resource type="BoxMesh" id="BoxMesh_qb0x1"]
lightmap_size_hint = Vector2i(22, 54)
size = Vector3(0.1, 3, 3)

[node name="floor door" type="StaticBody3D"]
script = SubResource("GDScript_a7dpo")
slide_sfx = ExtResource("1_mp7cb")

[node name="door panel" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.5, 0)
shape = SubResource("BoxShape3D_csrv8")
script = ExtResource("1_jpeal")
duration = 1.0
open_position = 3.5
clode_position = 1.5
direction = 1

[node name="MeshInstance3D" type="MeshInstance3D" parent="door panel"]
material_override = SubResource("ShaderMaterial_3bnqc")
mesh = SubResource("BoxMesh_qb0x1")
